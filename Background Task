Background tasks, also known as asynchronous tasks, are processes that run independently of the main program flow. Here's an example of how to perform a background task that takes input, processes it asynchronously, and provides output using Java's `ExecutorService` and `Future`:

```java
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class BackgroundTask implements Runnable {
    private double input;

    public BackgroundTask(double input) {
        this.input = input;
    }

    @Override
    public void run() {
        System.out.println("Background task started.");
        // Simulate processing (e.g., performing calculations)
        double result = input * 2;
        System.out.println("Background task completed. Result: " + result);
    }
}

public class BackgroundTaskExample {
    public static void main(String[] args) {
        ExecutorService executorService = Executors.newFixedThreadPool(1);

        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        double inputValue = scanner.nextDouble();

        BackgroundTask task = new BackgroundTask(inputValue);
        Future<?> future = executorService.submit(task);

        // Do other work in the main thread
        System.out.println("Main thread continues working...");

        // Wait for the background task to complete
        try {
            future.get(); // This will block until the task is completed
        } catch (Exception e) {
            e.printStackTrace();
        }

        executorService.shutdown();
        System.out.println("All tasks completed. Exiting.");
    }
}
```

In this example:

1. The `BackgroundTask` class implements the `Runnable` interface, which defines the background task to be executed asynchronously. In this case, the task simply doubles the input value.

2. The `BackgroundTaskExample` class is the main class of the example. It creates an `ExecutorService` using `Executors.newFixedThreadPool(1)` to manage background tasks.

3. The main thread prompts the user to enter a number and creates a `BackgroundTask` instance with the entered value.

4. The background task is submitted to the executor service using `executorService.submit(task)`.

5. The main thread continues with other work while the background task runs.

6. The main thread then waits for the background task to complete using `future.get()`. This blocks the main thread until the background task is finished.

7. Once the background task is completed, the executor service is shut down, and the program exits.

This example demonstrates how to run a background task asynchronously while allowing the main thread to continue working on other tasks. It also shows how to wait for the background task to complete using `Future`'s `get` method.
